#
# stm32l1 devices support both JTAG and SWD transports.
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32l1
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 10kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x2800
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0038
      # Section 30.6.3 - corresponds to Cortex-M3 r2p0
      set _CPUTAPID 0x4ba00477
   } else {
      # SWD IDCODE (single drop, arm)
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

if { [info exists BSTAPID] } {
   set _BSTAPID $BSTAPID
} else {
   # See STM Document RM0038 Section 30.6.1 Rev. 12
   # Low and medium density
   set _BSTAPID1 0x06416041
   # Cat.2 device (medium+ density)
   set _BSTAPID2 0x06429041
   # Cat.3 device (medium+ density)
   set _BSTAPID3 0x06427041
   # Cat.4 device, STM32L15/6xxD or Cat.3 device, some STM32L15/6xxC-A models
   set _BSTAPID4 0x06436041
   # Cat.5 device (high density), STM32L15/6xxE
   set _BSTAPID5 0x06437041
}

if {[using_jtag]} {
   swj_newdap $_CHIPNAME bs -irlen 5 \
   -expected-id $_BSTAPID1 -expected-id $_BSTAPID2 -expected-id $_BSTAPID3 \
   -expected-id $_BSTAPID4 -expected-id $_BSTAPID5
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32lx 0x08000000 0 0 0 $_TARGETNAME

# check for second flash bank
if { [regexp -nocase {stm32l15..e.x|stm32l162.e.x|stm32l151vdyxx|stm32l152vdtxx|stm32l162vdyxx} $_CHIPNAME] } {
	# STM32L151/152/162xE 512K & STM32L151/152/162VD(T/Y)xX 384K have a dual bank flash (Cat.5 device, high density).
	# Add the second flash bank.
	set _FLASHNAME $_CHIPNAME.flash1
	flash bank $_FLASHNAME stm32lx 0x8040000 0 0 0 $_TARGETNAME
} else {
	if { [regexp -nocase {stm32l15.qdhx|stm32l15.qchx|stm32l15.zdtx|stm32l15.zctx|stm32l15.rctxa|stm32l15.vctxa|stm32l15.vdtx|stm32l15.rdtx|stm32l15.rdyx| \
						  stm32l162qdhx|stm32l162zdtx|stm32l162rctxa|stm32l162vctxa|stm32l162vdtx|stm32l162rdtx|stm32l162rdyx} $_CHIPNAME] } {
		# STM32L151/152/162xDxxx 384K & STM32L151/152/162xCxxx 256K have a dual bank flash (Cat.4 device).
		# Add the second flash bank.
		set _FLASHNAME $_CHIPNAME.flash1
		flash bank $_FLASHNAME stm32lx 0x8030000 0 0 0 $_TARGETNAME
	}
}

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 480
}

adapter_nsrst_delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
	adapter_khz 281
} else {
	adapter_khz 240
}

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event reset-start {
	if {[using_jtag]} {
		adapter_khz 281
	} else {
		adapter_khz 240
	}
}

$_TARGETNAME configure -event reset-init {
global _CLOCK_FREQ

	# Enable HSI as clock source
	echo "STM32L: Enabling HSI"

	# Set HSION in RCC_CR
	mww 0x40023800 0x00000101

	# Set HSI as SYSCLK
	mww 0x40023808 0x00000001

	adapter_khz $_CLOCK_FREQ
}

$_TARGETNAME configure -event examine-end {
global ENABLE_LOW_POWER
global STOP_WATCHDOG

	if { [expr ($ENABLE_LOW_POWER == 1)] } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
		mmw 0xE0042004 0x00000007 0
	}
	if { [expr ($ENABLE_LOW_POWER == 0)] } {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
		mmw 0xE0042004 0 0x00000007
	}
	if { [expr ($STOP_WATCHDOG == 1)] } {
		# Stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
		mmw 0xE0042008 0x00001800 0
	}
	if { [expr ($STOP_WATCHDOG == 0)] } {
		# Don't stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= ~(DBG_IWDG_STOP | DBG_WWDG_STOP)
		mmw 0xE0042008 0 0x00001800
	}
}

$_TARGETNAME configure -event trace-config {
	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0042004 0x00000020 0
}

$_TARGETNAME configure -event gdb-attach {
global CONNECT_UNDER_RESET

	# Needed to be able to use the connect_assert_srst in reset_config
	# otherwise, wrong value when reading device flash size register
	if { [expr ($CONNECT_UNDER_RESET == 1)] } {
		reset init
	}
}

$_TARGETNAME configure -event gdb-detach {
	# to close connection if debug mode entered
	shutdown
}
